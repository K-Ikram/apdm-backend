# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class Alert(models.Model):
    alert_id = models.AutoField(primary_key=True)
    alert_date = models.DateField()
    crop_production_id = models.IntegerField()
    disease_id = models.IntegerField()
    feedback_treated = models.IntegerField(blank=True, null=True)
    feedback_date = models.DateField(blank=True, null=True)
    alert_confirmed = models.IntegerField(blank=True, null=True)
    client_id = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'alert'


class Anomaly(models.Model):
    anomaly_id = models.AutoField(primary_key=True)
    occurence_date = models.DateField()
    reporting_date = models.DateField()
    client_id = models.IntegerField()
    crop_production_id = models.IntegerField()
    disease_id = models.IntegerField()
    treated = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'anomaly'


class City(models.Model):
    city_id = models.AutoField(primary_key=True)
    city_name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'city'


class Client(models.Model):
    client_id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=50)
    surname = models.CharField(max_length=50)
    gender = models.CharField(max_length=5, blank=True, null=True)
    email = models.CharField(max_length=50)
    phone_contact = models.CharField(max_length=50)
    phone_sms = models.CharField(max_length=50)
    language = models.CharField(max_length=50, blank=True, null=True)
    comments = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'client'


class CropProduction(models.Model):
    crop_production_id = models.AutoField(primary_key=True)
    crop = models.CharField(max_length=6, blank=True, null=True)
    name = models.CharField(max_length=50)
    start_date = models.DateField()
    end_date = models.DateField(blank=True, null=True)
    yield_field = models.FloatField(db_column='yield', blank=True, null=True)  # Field renamed because it was a Python reserved word.
    plot_id = models.IntegerField()
    comments = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'crop_production'


class CropProductionDisease(models.Model):
    crop_production_id = models.IntegerField()
    disease_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'crop_production_disease'
        unique_together = (('crop_production_id', 'disease_id'),)


class CropProductionSensor(models.Model):
    crop_production_id = models.IntegerField()
    sensor_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'crop_production_sensor'
        unique_together = (('crop_production_id', 'sensor_id'),)


class Disease(models.Model):
    disease_id = models.AutoField(primary_key=True)
    disease_name = models.CharField(max_length=50)

    class Meta:
        managed = False
        db_table = 'disease'


class Farm(models.Model):
    farm_id = models.AutoField(primary_key=True)
    farm_name = models.CharField(max_length=50)
    city_id = models.CharField(max_length=50)
    comments = models.CharField(max_length=100, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'farm'


class FarmClient(models.Model):
    farm_id = models.IntegerField()
    client_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'farm_client'
        unique_together = (('farm_id', 'client_id'),)


class FhbPredictions(models.Model):
    prediction_id = models.AutoField(primary_key=True)
    predcition_date = models.DateTimeField()
    crop_production_id = models.IntegerField()
    temp_duration = models.FloatField()
    humidity_avg = models.FloatField()
    rainfall_duration = models.FloatField()
    class_field = models.CharField(db_column='class', max_length=10)  # Field renamed because it was a Python reserved word.
    risk_rate = models.FloatField()

    class Meta:
        managed = False
        db_table = 'fhb_predictions'


class FhbTrainingSet(models.Model):
    training_set_id = models.AutoField(primary_key=True)
    temp_duration = models.FloatField()
    humidity_avg = models.FloatField()
    rainfall_duration = models.FloatField()
    weight = models.FloatField(blank=True, null=True)
    class_field = models.CharField(db_column='class', max_length=10)  # Field renamed because it was a Python reserved word.

    class Meta:
        managed = False
        db_table = 'fhb_training_set'


class Measure(models.Model):
    measure_id = models.AutoField(primary_key=True)
    measure_value = models.FloatField()
    measure_timestamp = models.DateTimeField()
    sensor_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'measure'


class Plot(models.Model):
    plot_id = models.AutoField(primary_key=True)
    plot_name = models.CharField(max_length=50)
    latitude_n = models.FloatField()
    longitude_n = models.FloatField()
    latitude_s = models.FloatField()
    longitude_s = models.FloatField()
    soil_type = models.CharField(max_length=10, blank=True, null=True)
    farm_id = models.IntegerField()
    comments = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'plot'


class Sensor(models.Model):
    sensor_id = models.AutoField(primary_key=True)
    sensor_type = models.CharField(max_length=20)
    sensor_unit = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'sensor'


class SensorPlot(models.Model):
    sensor_id = models.IntegerField()
    plot_id = models.IntegerField()
    date_debut = models.DateField()
    date_fin = models.DateField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'sensor_plot'
        unique_together = (('sensor_id', 'plot_id', 'date_debut'),)


class VoisignageFhb(models.Model):
    prediction_id = models.IntegerField()
    training_set_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'voisignage_fhb'
        unique_together = (('prediction_id', 'training_set_id'),)
