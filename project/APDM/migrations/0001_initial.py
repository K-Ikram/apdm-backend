# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-20 21:56
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('alert_date', models.DateField()),
                ('risk_rate', models.FloatField()),
                ('feedback_treated', models.IntegerField(blank=True, null=True)),
                ('feedback_date', models.DateField(blank=True, null=True)),
                ('feedback_type', models.CharField(blank=True, max_length=15, null=True)),
            ],
            options={
                'db_table': 'alert',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Anomaly',
            fields=[
                ('anomaly_id', models.AutoField(primary_key=True, serialize=False)),
                ('occurence_date', models.DateTimeField()),
                ('reporting_date', models.DateTimeField(blank=True, null=True)),
                ('treated', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'anomaly',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('city_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'city',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CropProduction',
            fields=[
                ('crop_production_id', models.AutoField(primary_key=True, serialize=False)),
                ('crop', models.CharField(blank=True, max_length=6, null=True)),
                ('name', models.CharField(max_length=50)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('yield_field', models.FloatField(blank=True, db_column='yield', null=True)),
                ('comments', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'crop_production',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('disease_id', models.AutoField(primary_key=True, serialize=False)),
                ('disease_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'disease',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('farm_id', models.AutoField(primary_key=True, serialize=False)),
                ('farm_name', models.CharField(max_length=50)),
                ('comments', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'farm',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FhbPredictions',
            fields=[
                ('prediction_id', models.AutoField(primary_key=True, serialize=False)),
                ('prediction_date', models.DateTimeField()),
                ('crop_production_id', models.IntegerField()),
                ('temp_duration', models.FloatField()),
                ('humidity_avg', models.FloatField()),
                ('rainfall_duration', models.FloatField()),
                ('class_field', models.CharField(db_column='class', max_length=10)),
                ('risk_rate', models.FloatField()),
            ],
            options={
                'db_table': 'fhb_predictions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('plot_id', models.AutoField(primary_key=True, serialize=False)),
                ('plot_name', models.CharField(max_length=50)),
                ('latitude_n', models.FloatField()),
                ('longitude_n', models.FloatField()),
                ('latitude_s', models.FloatField()),
                ('longitude_s', models.FloatField()),
                ('soil_type', models.CharField(blank=True, max_length=10, null=True)),
                ('comments', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'plot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False)),
                ('sensor_type', models.CharField(max_length=20)),
                ('sensor_unit', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'sensor',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CropProductionDisease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.CropProduction')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Disease')),
            ],
        ),
        migrations.CreateModel(
            name='CropProductionSensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.CropProduction')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Sensor')),
            ],
        ),
        migrations.CreateModel(
            name='Ownfarm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SensorPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('plot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Plot')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Sensor')),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(blank=True, max_length=5, null=True)),
                ('phone_contact', models.CharField(max_length=50)),
                ('phone_sms', models.CharField(max_length=50)),
                ('language', models.CharField(blank=True, max_length=50, null=True)),
                ('comments', models.CharField(blank=True, max_length=100, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='ownfarm',
            name='client',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ownfarm',
            name='farm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Farm'),
        ),
    ]
