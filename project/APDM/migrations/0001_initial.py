# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-05-03 18:41
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('alert_id', models.AutoField(primary_key=True, serialize=False)),
                ('risk_rate', models.FloatField(blank=True, null=True, verbose_name='Taux de risque')),
                ('alert_date', models.DateTimeField(blank=True, null=True, verbose_name="Date de l'alerte")),
                ('feedback_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Type de feebdback')),
                ('feedback_date', models.DateTimeField(blank=True, null=True, verbose_name='Date du feedback')),
            ],
            options={
                'verbose_name': 'Alerte',
                'db_table': 'alert',
                'managed': False,
                'verbose_name_plural': 'Alertes',
            },
        ),
        migrations.CreateModel(
            name='AlertClient',
            fields=[
                ('client_id', models.IntegerField(primary_key=True)),
                ('alert_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'alert_client',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Anomaly',
            fields=[
                ('anomaly_id', models.AutoField(primary_key=True, serialize=False)),
                ('occurence_date', models.DateTimeField(verbose_name="Date d'occurrence")),
                ('reporting_date', models.DateTimeField(blank=True, null=True, verbose_name='Date de signalisation')),
            ],
            options={
                'verbose_name': 'Anomalie',
                'db_table': 'anomaly',
                'managed': False,
                'verbose_name_plural': 'Anomalies',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('city_id', models.AutoField(primary_key=True, serialize=False)),
                ('city_name', models.CharField(max_length=50, verbose_name='Nom de la ville')),
            ],
            options={
                'verbose_name': 'Ville',
                'db_table': 'city',
                'managed': False,
                'verbose_name_plural': 'Villes',
            },
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('crop_id', models.AutoField(primary_key=True, serialize=False)),
                ('crop_name', models.CharField(max_length=50, verbose_name='Type de culture')),
            ],
            options={
                'verbose_name': 'Type de culture',
                'db_table': 'crop',
                'managed': False,
                'verbose_name_plural': 'Types de cultures',
            },
        ),
        migrations.CreateModel(
            name='CropClient',
            fields=[
                ('client_id', models.IntegerField(primary_key=True)),
                ('crop_production_id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'crop_client',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CropProduction',
            fields=[
                ('crop_production_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Nom de la culture')),
                ('start_date', models.DateField(verbose_name='Date de d\xe9but')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Date de fin')),
                ('yield_field', models.FloatField(blank=True, db_column='yield', null=True, verbose_name='R\xe9colte')),
                ('comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Commentaires')),
            ],
            options={
                'verbose_name': 'Culture',
                'db_table': 'crop_production',
                'managed': False,
                'verbose_name_plural': 'Cultures',
            },
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('disease_id', models.AutoField(primary_key=True, serialize=False)),
                ('disease_name', models.CharField(max_length=50, verbose_name='Nom de la maladie')),
                ('job_period', models.IntegerField(verbose_name='P\xe9riode de d\xe9clenchement')),
            ],
            options={
                'verbose_name': 'Maladie',
                'db_table': 'disease',
                'managed': False,
                'verbose_name_plural': 'Maladies',
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Farm',
            fields=[
                ('farm_id', models.AutoField(primary_key=True, serialize=False)),
                ('farm_name', models.CharField(max_length=50, verbose_name='Nom de la ferme')),
                ('comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Commentaires')),
            ],
            options={
                'verbose_name': 'Ferme',
                'db_table': 'farm',
                'managed': False,
                'verbose_name_plural': 'Fermes',
            },
        ),
        migrations.CreateModel(
            name='Plot',
            fields=[
                ('plot_id', models.AutoField(primary_key=True, serialize=False)),
                ('plot_name', models.CharField(max_length=50, verbose_name='Nom de la parcelle')),
                ('latitude_n', models.FloatField(verbose_name='Lat Nord')),
                ('longitude_n', models.FloatField(verbose_name='Long Nord')),
                ('latitude_s', models.FloatField(verbose_name='Lat Sud')),
                ('longitude_s', models.FloatField(verbose_name='Long Sud')),
                ('soil_type', models.CharField(blank=True, max_length=10, null=True, verbose_name='Type de sol')),
                ('comments', models.CharField(blank=True, max_length=50, null=True, verbose_name='Commentaires')),
            ],
            options={
                'verbose_name': 'Parcelle',
                'db_table': 'plot',
                'managed': False,
                'verbose_name_plural': 'Parcelles',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('sensor_id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID du capteur')),
                ('sensor_type', models.CharField(choices=[('rainfall', 'Pr\xe9cipitations'), ('temperature', 'Temp\xe9rature'), ('humidity', 'Humidit\xe9 relative')], max_length=20, verbose_name='Type du capteur')),
                ('sensor_unit', models.CharField(max_length=20, verbose_name='Unit\xe9 de mesure')),
            ],
            options={
                'verbose_name': 'Capteur',
                'db_table': 'sensor',
                'managed': False,
                'verbose_name_plural': 'Capteurs',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.ASCIIUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('client_id', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(blank=True, choices=[('homme', 'Homme'), ('femme', 'Femme')], max_length=5, null=True, verbose_name='genre')),
                ('phone_contact', models.CharField(blank=True, max_length=50, null=True, verbose_name='T\xe9l.')),
                ('phone_sms', models.CharField(blank=True, max_length=50, null=True, verbose_name='T\xe9l. pour la r\xe9ception des SMS')),
                ('language', models.CharField(blank=True, choices=[('french', 'Fran\xe7ais'), ('english', 'Anglais'), ('arabic', 'Arabe'), ('spanish', 'Espagnol'), ('german', 'Allmand')], max_length=10, null=True, verbose_name='Langue')),
                ('notification_sms', models.BooleanField(default=True, help_text='Activer ou d\xe9sativer la reception des notifications par SMS', verbose_name='Notification par SMS')),
                ('notification_email', models.BooleanField(default=True, help_text='Activer ou d\xe9sativer la reception des notifications par email', verbose_name='Notification par email')),
                ('comments', models.CharField(blank=True, max_length=100, null=True, verbose_name='Commentaires')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'db_table': 'apdm_client',
                'managed': False,
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CropProductionDisease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.CropProduction', verbose_name='Culture')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Disease', verbose_name='Maladie')),
            ],
            options={
                'verbose_name': 'Maladie',
                'verbose_name_plural': 'Maladies sureill\xe9es',
            },
        ),
        migrations.CreateModel(
            name='CropProductionSensor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crop_production', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.CropProduction', verbose_name='Culture')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Sensor', verbose_name='Capteur')),
            ],
            options={
                'verbose_name': 'Culture',
                'verbose_name_plural': 'Cultures',
            },
        ),
        migrations.CreateModel(
            name='Ownfarm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('farm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Farm', verbose_name='Ferme')),
            ],
            options={
                'verbose_name': 'Propri\xe9taire',
                'verbose_name_plural': 'Propri\xe9taires',
            },
        ),
        migrations.CreateModel(
            name='SensorPlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(verbose_name='Date de placement du capteur')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name="Date d'enl\xe8vement")),
                ('plot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Plot', verbose_name='Parcelle')),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='APDM.Sensor', verbose_name='Capteur')),
            ],
            options={
                'verbose_name': 'Parcelle',
                'verbose_name_plural': 'Parcelles',
            },
        ),
    ]
